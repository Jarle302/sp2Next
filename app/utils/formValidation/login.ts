//  isinputNameValid and isValidUrl are both generated by AI

function isinputNameValid(inputName: string) {
  const invalidCharacters = /[^a-zA-Z_]/;
  return invalidCharacters.test(inputName);
}

function isValidUrl(url: string) {
  const urlPattern = new RegExp(
    "^(https?:\\/\\/)?" + // protocol
      "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" + // domain name and extension
      "((\\d{1,3}\\.){3}\\d{1,3}))" + // OR ip (v4) address
      "(\\:\\d+)?" + // port
      "(\\/[-a-z\\d%_.~+]*)*" + // path
      "(\\?[;&amp;a-z\\d%_.~+=-]*)?" + // query string
      "(\\#[-a-z\\d_]*)?$",
    "i"
  ); // fragment locator
  return !!urlPattern.test(url);
}
type alternatives = "name" | "email" | "avatar" | "password";

export default function validateLoginRegister(
  inputName: alternatives,
  value: string
) {
  const errors: { [key: string]: string } = {};

  switch (inputName) {
    case "email": {
      if (
        value.split("@")[1] !== "stud.noroff.no" ||
        value.split("@")[0].length < 1
      ) {
        errors[inputName] =
          "A valid email including @stud.noroff.no is required";
      }
      return errors;  
    }

    case "password":
      if (value.trim().length < 8) {
        errors[inputName] = "Password must be at least 8 characters long";
      } else errors[inputName] = "";
      return errors;
    case "name":
      if (isinputNameValid(value)) {
        errors[inputName] = "Please use only letters and _ in your name";
      } else errors[inputName] = "";
      return errors;

    case "avatar": {
      if (!isValidUrl(value)) {
        errors[inputName] =
          "Please enter a valid url,Note adding a picture is optional";
      } else errors[inputName] = "";
      return errors;
    }

    default:
      {
      }
      return errors;
  }
}
